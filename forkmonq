#! /usr/bin/env bash

function print_usage () {
   echo "forkmon help:"
   echo
   echo "SYNOPSIS:  forkmon provides detailed information for every active fork process on the local server."
   echo "           For farmer processes, this includes version of the fork code, farming status, number of"
   echo "    connected peers, number of plots being farmed (some older forks may only count plots on local server),"
   echo "    blockchain height, total fork netspace, fullnode worker count, memory usage, the total number of"
   echo "    'Harvester did not respond' errors in the farmer log since midnight yesterday (harvester logs do not"
   echo "    reflect this error), balance for the target address (100% local blockchain explorer), Expected Time To"
   echo "    Win (far more precise than what is provided by 'forkname farm summary'), and Effort% (if your ETW is"
   echo "    24 hours, and 36 hours have passed since you farmed your last block to your target address - or since"
   echo "    you started farming the fork if you've never won a block - then your Effort% would be 150%.)"
   echo "           For harvester processes, this includes version of the fork code, local plot count, time of last"
   echo "    harvest, longest response time since midnight today and since midnight yesterday, and number of proofs"
   echo "    found since midnight yesterday."
   echo "           MacOS X users:  fullnode worker count and memory usage in the farmer section are not yet supported."
   echo
   echo "PARAMETERS:"
   echo "    forkname            OPTIONAL.  If set, must be the first parameter.  Only show output for this fork."
   echo "    -n | --nobalance    OPTIONAL.  If set, all balances will show 0.  For privacy when posting results online."
   echo "    -help | --help      Show this information again."
   echo
   exit 0
}

VALIDATEFORKNAME='No'
FTERRORSTOFILE='Yes'
if [[ $1 != '' && $1 != '-n' && $1 != '--nowallet' ]]; then
  VALIDATEFORKNAME='Yes'
fi
. ftinit.sh

if [[ $1 == '-n' || $1 == '--nobalance' || $2 == '-n' || $2 == '--nobalance' ]]; then
  HIDEBALANCES=1
fi

. ftbuildfarmerlist.sh

# echo "forkmon $1 $2 $3 $4 $5 initiated on" `date`
printf '\n'
if [[ $VALIDATEFORKNAME == 'No' ]]; then
  echo -e "------------------------------------------------------------------- FARMERS: $FARMERCOUNT -----------------------------------------------------------------"
  printf '\n'
fi
printf '                                                                              FulNode   Memory   NoHarv       Address              Last\n'
printf 'Farmer            Version         Status   #Peers   #Plots  Height  Netspace  Workers    Usage   Errors       Balance   ETW        Block   Effort\n'
echo -e "-------------------------------------------------------------------------------------------------------------------------------------------------"
for fork in $FARMERLIST; do
   FORKNAME=$fork
   if [[ $VALIDATEFORKNAME == 'Yes' && $fork != $1 ]]; then
     continue
   fi
   cd $FORKTOOLSHIDDENDIRS/.$fork/mainnet/log   
   HARVERRORSTODAY=$(grep -a "Harvester did not respond" debug.log* | grep $TODAYSTAMP | wc -l | awk '{$1=$1};1')
   HARVERRORSYESTERDAY=$(grep -a "Harvester did not respond" debug.log* | grep $YESTERDAYSTAMP | wc -l | awk '{$1=$1};1')
   let HARVESTERERRORS=$HARVERRORSTODAY+$HARVERRORSYESTERDAY
#   cd $FORKTOOLSBLOCKCHAINDIRS/$FORKNAME-blockchain 
#   . ./activate    
   FORKMEM=$(forkmemory)
   FORKVERSION=$($FORKTOOLSDIR/forkverq $fork)
   FORKNODES=$($FORKTOOLSDIR/forknodesq $fork | wc -l | awk '{$1=$1};1')
   FULLNODEPROCESS='\s'$FORKNAME'_full'   
   FNWORKERS=$(ps -ef | grep "$FULLNODEPROCESS" | grep -v grep | wc -l | awk '{$1=$1};1' )
   
   . $FORKTOOLSDIR/ftrpcinclude.sh   
   EFFORT=${EFFORT%.*}
   ADDRESSBALANCE=${ADDRESSBALANCE%.*}
   if [[ $HIDEBALANCES == 1 ]]; then
     ADDRESSBALANCE=0
   fi
   if [[ $BLOCKWON == 'false' ]]; then
     LASTBLOCKAGOTEXT='Never  '
   else
     LASTBLOCKAGOTEXT=$(echo "$LASTBLOCKAGOTEXT ago")   
   fi
   PRINTEFFORT=$(printf '%5d%%' "$EFFORT")
   if [[ $EFFORT == 99999 ]]; then
      PRINTEFFORT='N/A'
   fi     
   printf '%-17.17s %-15.15s %-10.10s%5.5s%9.9s %7d%10.10s   %4.4s %8s %7.7s %10d %-5.5s %-7s%11.11s %5s\n' "$fork" "$FORKVERSION" "$FARMSTATUS" "$FORKNODES" "$PLOTCOUNT" "$PEAKHEIGHT" "$NETSPACE" "$FNWORKERS" "$FORKMEM" "$HARVESTERERRORS" "$ADDRESSBALANCE" "$COINNAME" "$ETWTEXT" "$LASTBLOCKAGOTEXT" "$PRINTEFFORT"
done

. ftbuildharvesterlist.sh

printf '\n'
if [[ $VALIDATEFORKNAME == 'No' ]]; then
  echo -e "-------------------------------------------- HARVESTERS: $HARVESTERCOUNT ------------------------------------------------"
fi
printf '                                                            Longest      Longest     Proofs\n'
printf '                                                 Last      Response     Response      Since\n'
printf 'Harvester         Version      # Plots        Harvest         Today    Yesterday  Yesterday\n'
echo -e "------------------------------------------------------------------------------------------------------------"
for fork in $HARVESTERLIST; do
   if [[ $VALIDATEFORKNAME == 'Yes' && $fork != $1 ]]; then
     continue
   fi
   cd $FORKTOOLSHIDDENDIRS/.$fork/mainnet/log
   FORKVERSION=$($FORKTOOLSDIR/forkverq $fork)
   LASTHARVESTERLINE=$(cat debug.log | grep -a "plots were eligible" | tail -1)
   PLOTCOUNT=$(sed 's/.*Total //' <<< "$LASTHARVESTERLINE" | sed 's/ plots//' | awk '{$1=$1};1')
   CURRENTTIME=$(date "+%s")
   LASTHARVESTTIME=$(sed 's/\..*//' <<< "$LASTHARVESTERLINE" | awk '{$1=$1};1')
   LASTHARVESTEPOCH=$(echo "$LASTHARVESTTIME" | DateToEpoch )
   if [[ $LASTHARVESTEPOCH = '' ]]; then
     LASTHARVESTEPOCH=0
   fi
   let LASTHARVESTAGO=$CURRENTTIME-$LASTHARVESTEPOCH
   LASTRESPONSETIME=$(sed 's/.*Time: //' <<< "$LASTHARVESTERLINE" | sed 's/ s\. Total.*//' | awk '{$1=$1};1')
   TODAYMAX=$(grep -a $TODAYSTAMP debug.log* | grep -a 'plots were eligible' | sed 's/\./\. /' | sed 's/\. .*Time://' | sed 's/ s\. Total.*//' | awk '{print $2}' | sort -nr | head -n 1)
   YESTERDAYMAX=$(grep -a $YESTERDAYSTAMP debug.log* | grep -a 'plots were eligible' | sed 's/\./\. /' | sed 's/\. .*Time://' | sed 's/ s\. Total.*//' | awk '{print $2}' | sort -nr | head -n 1)
   PROOFSTODAYLIST=$(grep -a $TODAYSTAMP debug.log* | grep -a "Found [1.9].* proofs" | sed 's/.*Found //' | sed 's/ proofs.*//' )
   PROOFSYESTERDAYLIST=$(grep -a $YESTERDAYSTAMP debug.log* | grep -a "Found [1.9].* proofs" | sed 's/.*Found //' | sed 's/ proofs.*//' )   
   PROOFCOUNT=0
   for proof in $(echo $PROOFSTODAYLIST); do
     let PROOFCOUNT=$PROOFCOUNT+$proof
   done
   for proof in $(echo $PROOFSYESTERDAYLIST); do
     let PROOFCOUNT=$PROOFCOUNT+$proof
   done
   printf '%-17.17s %-15s %-8s %5ss ago      %7.2fs     %7.2fs      %5s\n' "$fork" "$FORKVERSION" "$PLOTCOUNT" "$LASTHARVESTAGO" "$TODAYMAX" "$YESTERDAYMAX" "$PROOFCOUNT"
done
echo

. ftexit.sh


