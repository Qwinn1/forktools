#! /usr/bin/env bash

function print_usage () {
   echo "Usage:  forklog"
   echo "  forkname                                  Required parameter.  All others optional, but need at least one to get any results."
   echo "  -e | --error                              Adds 'ERROR' as a search term."
   echo "  -w | --warning                            Adds 'WARNING' as a search term."
   echo "  -ha | --harv                               Adds 'harvester' as a search term."
   echo "  -p | --proof                              Adds any positive # of found proofs as a search term."
   echo "  -g 'word' | --grep 'word'                 Adds 'word' as a search term.  Multiple uses allowed."
   echo "  -l 10 | --lastxdays 10                    Shows only results for the last 10 days."
   echo "                                            Default value can be set globally in forktoolsinit.sh."
   echo "  -s YYYY-MM-DD | --startdate YYYY-MM-DD    Do not show results prior to this date.  If both this and -l / --lastxdays are set, this is used."
   echo "                                            Default value can be set globally in forktoolsinit.sh."
   echo "  -u | --enddate YYYY-MM-DD                 Do not show results after this date."
   echo "                                            Default value can be set globally in forktoolsinit.sh."
   echo "  -t [100] | --tail [100]                   Tails the last 100 lines of the result."
   echo "                                            The number parameter is optional.  If not set, uses default value set in forktoolsinit.sh"                    
   echo "  -h | --help                               Show this information again."
   exit 0
}

if [[ $1 = '-h' || $1 = '--help' ]]; then
  print_usage
  exit
fi    

VALIDATEFORKNAME='No'
. forktoolsinit.sh

FORKNAME=$1
if [[ $FORKNAME = '' ]]; then
  echo 'Failed to specify required parameter forkname.  At least one switch is also required.'
  print_usage
  exit
fi

if [ ! -f "$FORKTOOLSHIDDENDIRS/.$FORKNAME/mainnet/log/debug.log" ]; then
  echo "Invalid forkname or configured path:  $1/mainnet/log/debug.log does not exist."
  exit
fi  

if [[ $2 = '' ]]; then
  echo 'At least one switch must be used in order to produce any output.'
  print_usage
  exit
fi  
  
STARTDATE=$FORKLOGSTARTDATE
LASTXDAYS=$FORKLOGLASTXDAYS
ENDDATE=$(date -d '+1 day' +"20%y-%m-%d")


GREPTERM=''
FIRSTLOOP=1
while [[ $# -gt 0 ]]; do
   if [[ $FIRSTLOOP = 1 ]]; then
     FORKNAME="$1"
     FIRSTLOOP=0
     shift
     continue
   fi
   opt="$1"
   case "$opt" in
     "-e"|"--error"          ) GREPTERM=$(echo "$GREPTERM" '-e ERROR'); shift;;
     "-w"|"--warning"        ) GREPTERM=$(echo "$GREPTERM" '-e WARNING'); shift;;
     "-p"|"--proofs"         ) GREPTERM=$(echo "$GREPTERM" '-e "Found [1.9].* proofs"'); shift;;
     "-ha"|"--harv"          ) GREPTERM=$(echo "$GREPTERM" '-e harvester'); shift;;
     "-g"|"--grep"           ) shift; GREPTERM=$(echo $GREPTERM '-e ' $1); shift;;
     "-l"|"--lastxdays"      ) shift; LASTXDAYS="$1"; SETLASTXDAYS="$1"; shift;;
     "-s"|"--startdate"      ) shift; STARTDATE="$1"; SETSTARTDATE="$1"; shift;;
     "-u"|"--enddate"        ) shift; ENDDATE="$1"; ENDDATE=$(date -d $ENDDATE'+1 day' +"20%y-%m-%d"); shift;;
     "-t"|"--tail"           ) shift
                               TAILLENGTH=$FORKLOGTAIL
                               if [[ $1 != '' ]]
                               then
                                  ISITASWITCH=$(cut -b 1 <<< $1)
                                  if [[ $ISITASWITCH != '-' ]] 
                                  then
                                     TAILLENGTH="$1"
                                     shift                                     
                                  fi
                               fi
                               ;;
     "-h"|"--help"           ) print_usage;;
     *                       ) echo 'ERROR: Invalid option: '$opt >&2
                               exit 1;;
   esac
done

if [[ $LASTXDAYS != '' ]]; then
   STARTFROM=$(echo "(($LASTXDAYS - 1))" | bc)
   STARTFROM=$(date -d "-${STARTFROM} day" +"20%y-%m-%d")
fi

if [[ $STARTDATE != '' && ($SETLASTXDAYS = '' || $SETSTARTDATE != '') ]]; then
   STARTFROM=$STARTDATE
fi


BUILDEXPR=$(echo 'awk -v start='"$STARTFROM"' -v end='"$ENDDATE")
BUILDEXPR=$(echo $BUILDEXPR "'"'$0 >= start && $0 <= end'"'" '$FORKTOOLSHIDDENDIRS/.$FORKNAME/mainnet/log/debug.log*')
BUILDEXPR=$(echo $BUILDEXPR "| grep $GREPTERM | sort")
if [[ $TAILLENGTH != '' ]]; then
   BUILDEXPR=$(echo $BUILDEXPR " | tail -$TAILLENGTH")
fi
IFS=''
echo $(eval $BUILDEXPR)
IFS=$DEFAULT_IFS

