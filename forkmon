#! /usr/bin/env bash

function print_usage () {
   echo "Usage:  forkmon"
   echo "  forkname                                  OPTIONAL.  If set, must be the first parameter.  Forkmon will only show output for this single fork."
   echo "  -n | --nobalance                          OPTIONAL.  If set, all balances will show 0.  For privacy if you wish to post results in a public forum."
   echo "  -h | --help                               Show this information again."
   exit 0
}

if [[ $1 = '-h' || $1 = '--help' ]]; then
  print_usage
  exit
fi   

VALIDATEFORKNAME='No'
if [[ $1 != '' && $1 != '-n' && $1 != '--nowallet' ]]; then
  VALIDATEFORKNAME='Yes'
fi
. forktoolsinit.sh

# These two lines reroute ugly error messages to a file in forktools directory.  Mainly so we don't get a lot of ugly python errors when user uses Ctrl-C while
# a fork's python function is running.
# The exec 3 part is so we can restore error output to wherever it used to be going to when done.
exec 3>&2  # capture current stderr output destination
exec 2>> $FORKTOOLSDIR/forkerrors.txt #reroute stderr

echo "Forkmon initiated at " $(date) >> $FORKTOOLSDIR/forkerrors.txt

# Graceful exit on Ctrl-C
trap stopforkmonscript SIGINT
stopforkmonscript() {
   echo -e "\nCtrl-C detected.  forkmon aborted."
   exec 2>&3 #Restore stderr destination
   exit
}

if [[ $1 == '-n' || $1 == '--nobalance' || $2 == '-n' || $2 == '--nobalance' ]]; then
  HIDEBALANCES=1
fi

FARMERCOUNT=$(ps -ef | grep _farmer | grep -v grep | wc -l | awk '{$1=$1};1' )
HARVESTERCOUNT=$(ps -ef | grep _harvester | grep -v grep | wc -l | awk '{$1=$1};1')


OLDIFS=$IFS
IFS=''
FARMERLIST=$(ps -ef | grep _farmer | grep -v grep | awk '{print $8}' | sed 's/_farmer//' | grep -v [s]ed | uniq | sort)
# Verify chia farmer actually running - necessary because of shitforks that didn't rename their processes
CHIAPORTINUSE=$(netstat -atnp 2>/dev/null | grep '/chia_farm' | grep ":8559 " | wc -l | awk '{$1=$1};1')
if [[ $CHIAPORTINUSE == 0 ]]; then
  FARMERLIST=$(echo $FARMERLIST | sed '/^chia$/d')
fi

# Add special handling for obnoxious horribly coded forks that use "chia_farmer" as process name
# I do this under protest.
XCHAPORTINUSE=$(netstat -atnp 2>/dev/null | grep '/chia_farm' | grep ":5159 " | wc -l | awk '{$1=$1};1')
if [[ $XCHAPORTINUSE == 1 ]]; then 
  FARMERLIST=$(echo -e $FARMERLIST"\nxcha" )
fi  
LUCKYPORTINUSE=$(netstat -atnp 2>/dev/null | grep '/chia_farm' | grep ":16659 " | wc -l | awk '{$1=$1};1')
if [[ $LUCKYPORTINUSE == 1 ]]; then 
  FARMERLIST=$(echo -e $FARMERLIST"\nlucky" )
fi  
NCHAINPORTINUSE=$(netstat -atnp 2>/dev/null | grep '/chia_farm' | grep ":38559 " | wc -l | awk '{$1=$1};1')
if [[ $NCHAINPORTINUSE == 1 ]]; then 
  FARMERLIST=$(echo -e $FARMERLIST"\nnchain" )
fi  
FISHERYPORTINUSE=$(netstat -atnp 2>/dev/null | grep '/chia_farm' | grep ":4799 " | wc -l | awk '{$1=$1};1')
if [[ $FISHERYPORTINUSE == 1 ]]; then 
  FARMERLIST=$(echo -e $FARMERLIST"\nfishery" )
fi  
IFS=$OLDIFS

printf '\n'
if [[ $VALIDATEFORKNAME == 'No' ]]; then
  echo -e "------------------------------------------------------------------- FARMERS: $FARMERCOUNT -----------------------------------------------------------------"
  printf '\n'
fi
printf '                                                                              FulNode   Memory   NoHarv       Address              Last\n'
printf 'Farmer            Version         Status   #Peers   #Plots  Height  Netspace  Workers    Usage   Errors       Balance   ETW        Block   Effort\n'
echo -e "-------------------------------------------------------------------------------------------------------------------------------------------------"
for fork in $FARMERLIST; do
   FORKNAME=$fork
   if [[ $VALIDATEFORKNAME == 'Yes' && $fork != $1 ]]; then
     continue
   fi
   cd $FORKTOOLSHIDDENDIRS/.$fork/mainnet/log   
   HARVERRORSTODAY=$(grep -a "Harvester did not respond" debug.log* | grep $TODAYSTAMP | wc -l | awk '{$1=$1};1')
   HARVERRORSYESTERDAY=$(grep -a "Harvester did not respond" debug.log* | grep $YESTERDAYSTAMP | wc -l | awk '{$1=$1};1')
   let HARVESTERERRORS=$HARVERRORSTODAY+$HARVERRORSYESTERDAY
#   cd $FORKTOOLSBLOCKCHAINDIRS/$FORKNAME-blockchain 
#   . ./activate    
   FORKMEM=$(for pid in $(pgrep ^${fork}_); do 
     awk '/Pss:/{ sum += $2 } END { print sum }' /proc/${pid}/smaps 
   done | awk '{ sum +=$1/1024 } END {printf "%7.0f MB\n", sum}')
   FORKVERSION=$($FORKTOOLSDIR/forkver $fork)
   FORKNODES=$($FORKTOOLSDIR/forknodes $fork | wc -l | awk '{$1=$1};1')
   FULLNODEPROCESS='\s'$FORKNAME'_full'   
   FNWORKERS=$(ps -ef | grep "$FULLNODEPROCESS" | grep -v grep | wc -l | awk '{$1=$1};1' )
   
   . $FORKTOOLSDIR/ftrpcinclude.sh   
   EFFORT=${EFFORT%.*}
   ADDRESSBALANCE=${ADDRESSBALANCE%.*}
   if [[ $HIDEBALANCES == 1 ]]; then
     ADDRESSBALANCE=0
   fi
   printf '%-17.17s %-15.15s %-10.10s%5.5s%9.9s %7d%10.10s   %4.4s %8s %7.7s %10d %-5.5s %-7s%7.7s ago %5d%%\n' "$fork" "$FORKVERSION" "$FARMSTATUS" "$FORKNODES" "$PLOTCOUNT" "$PEAKHEIGHT" "$NETSPACE" "$FNWORKERS" "$FORKMEM" "$HARVESTERERRORS" "$ADDRESSBALANCE" "$COINNAME" "$ETWTEXT" "$LASTBLOCKAGOTEXT" "$EFFORT"
done

OLDIFS=$IFS
IFS=''
HARVESTERLIST=$(ps -ef | grep _harvester | grep -v grep | awk '{print $8}' | sed 's/_harvester//' | grep -v [s]ed | uniq | sort)
CHIAPORTINUSE=$(netstat -atnp 2>/dev/null | grep '/chia_harv' | grep ":8560 " | wc -l | awk '{$1=$1};1')
if [[ $CHIAPORTINUSE == 0 ]]; then
  HARVESTERLIST=$(echo $HARVESTERLIST | sed '/^chia$/d')
fi

# Add special handling for obnoxious horribly coded forks that use "chia_harvester" as process names
# I do this under protest.
XCHAPORTINUSE=$(netstat -atnp 2>/dev/null | grep '/chia_harv' | grep ":5160 " | wc -l | awk '{$1=$1};1')
if [[ $XCHAPORTINUSE == 1 ]]; then 
  HARVESTERLIST=$(echo -e $HARVESTERLIST"\nxcha" )
fi  
LUCKYPORTINUSE=$(netstat -atnp 2>/dev/null | grep '/chia_harv' | grep ":16660 " | wc -l | awk '{$1=$1};1')
if [[ $LUCKYPORTINUSE == 1 ]]; then 
  HARVESTERLIST=$(echo -e $HARVESTERLIST"\nlucky" )
fi  
NCHAINPORTINUSE=$(netstat -atnp 2>/dev/null | grep '/chia_harv' | grep ":38560 " | wc -l | awk '{$1=$1};1')
if [[ $NCHAINPORTINUSE == 1 ]]; then 
  HARVESTERLIST=$(echo -e $HARVESTERLIST"\nnchain" )
fi  
FISHERYPORTINUSE=$(netstat -atnp 2>/dev/null | grep '/chia_harv' | grep ":4790 " | wc -l | awk '{$1=$1};1')
if [[ $FISHERYPORTINUSE == 1 ]]; then 
  HARVESTERLIST=$(echo -e $HARVESTERLIST"\nfishery" )
fi  
IFS=$OLDIFS


printf '\n'
if [[ $VALIDATEFORKNAME == 'No' ]]; then
  echo -e "-------------------------------------------- HARVESTERS: $HARVESTERCOUNT ------------------------------------------------"
fi
printf '                                                            Longest      Longest     Proofs\n'
printf '                                                 Last      Response     Response      Since\n'
printf 'Harvester         Version      # Plots        Harvest         Today    Yesterday  Yesterday\n'
echo -e "------------------------------------------------------------------------------------------------------------"
for fork in $HARVESTERLIST; do
   if [[ $VALIDATEFORKNAME == 'Yes' && $fork != $1 ]]; then
     continue
   fi
   cd $FORKTOOLSHIDDENDIRS/.$fork/mainnet/log
   FORKVERSION=$($FORKTOOLSDIR/forkver $fork)
   LASTHARVESTERLINE=$(cat debug.log | grep -a "plots were eligible" | tail -1)
   PLOTCOUNT=$(sed 's/.*Total //' <<< "$LASTHARVESTERLINE" | sed 's/ plots//' | awk '{$1=$1};1')
   CURRENTTIME=$(date "+%s")
   LASTHARVESTTIME=$(sed 's/\..*//' <<< "$LASTHARVESTERLINE" | awk '{$1=$1};1')
   LASTHARVESTEPOCH=$(date --date="$LASTHARVESTTIME" +%s | awk '{$1=$1};1')
   if [[ $LASTHARVESTEPOCH = '' ]]; then
     LASTHARVESTEPOCH=0
   fi
   let LASTHARVESTAGO=$CURRENTTIME-$LASTHARVESTEPOCH
   LASTRESPONSETIME=$(sed 's/.*Time: //' <<< "$LASTHARVESTERLINE" | sed 's/ s\. Total.*//' | awk '{$1=$1};1')
   TODAYMAX=$(grep -a $TODAYSTAMP debug.log* | grep -a 'plots were eligible' | sed 's/\./\. /' | sed 's/\. .*Time://' | sed 's/ s\. Total.*//' | awk '{print $2}' | sort -nr | head -n 1)
   YESTERDAYMAX=$(grep -a $YESTERDAYSTAMP debug.log* | grep -a 'plots were eligible' | sed 's/\./\. /' | sed 's/\. .*Time://' | sed 's/ s\. Total.*//' | awk '{print $2}' | sort -nr | head -n 1)
   PROOFSTODAYLIST=$(grep -a $TODAYSTAMP debug.log* | grep -a "Found [1.9].* proofs" | sed 's/.*Found //' | sed 's/ proofs.*//' )
   PROOFSYESTERDAYLIST=$(grep -a $YESTERDAYSTAMP debug.log* | grep -a "Found [1.9].* proofs" | sed 's/.*Found //' | sed 's/ proofs.*//' )   
   PROOFCOUNT=0
   for proof in $(echo $PROOFSTODAYLIST); do
     let PROOFCOUNT=$PROOFCOUNT+$proof
   done
   for proof in $(echo $PROOFSYESTERDAYLIST); do
     let PROOFCOUNT=$PROOFCOUNT+$proof
   done
   printf '%-17.17s %-15s %-8s %5ss ago      %7.2fs     %7.2fs      %5s\n' "$fork" "$FORKVERSION" "$PLOTCOUNT" "$LASTHARVESTAGO" "$TODAYMAX" "$YESTERDAYMAX" "$PROOFCOUNT"
done

exec 2>&3  #Restore stderr destination

