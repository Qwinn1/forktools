#! /usr/bin/env bash

VALIDATEFORKNAME='No'
. forktoolsinit.sh

# These two lines reroute ugly error messages to a file in forktools directory.  Mainly so we don't get a lot of ugly python errors when user uses Ctrl-C while
# a fork's python function is running.
# The exec 3 part is so we can restore error output to wherever it used to be going to when done.
exec 3>&2  # capture current stderr output destination
exec 2>> $FORKTOOLSDIR/forkerrors.txt #reroute stderr

# Graceful exit on Ctrl-C
trap stopforkmonscript SIGINT
stopforkmonscript() {
   echo -e "\nCtrl-C detected.  forkmon aborted."
   exec 2>&3 #Restore stderr destination
   exit
}

FARMERCOUNT=$(ps -ef | grep _farmer | grep -v grep | wc -l | awk '{$1=$1};1' )
HARVESTERCOUNT=$(ps -ef | grep _harvester | grep -v grep | wc -l | awk '{$1=$1};1')

printf '\n'
echo -e "---------------------------------------------------------------- FARMERS: $FARMERCOUNT --------------------------------------------------------------"
printf '\n'
printf '                                                                       FulNode   Memory   NoHarv       Address              Last\n'
printf 'Fork              Version         Status   #Peers   #Plots   Netspace  Workers    Usage   Errors       Balance   ETW        Block   Effort\n'
echo -e "-------------------------------------------------------------------------------------------------------------------------------------------"
for fork in $(ps -ef | grep _farmer | grep -v grep | awk '{print $8}' | sed 's/_farmer//' | grep -v [s]ed | sort); do
   FORKNAME=$fork
   cd $FORKTOOLSHIDDENDIRS/.$fork/mainnet/log   
   HARVERRORSTODAY=$(grep "Harvester did not respond" debug.log* | grep $TODAYSTAMP | wc -l | awk '{$1=$1};1')
   HARVERRORSYESTERDAY=$(grep "Harvester did not respond" debug.log* | grep $YESTERDAYSTAMP | wc -l | awk '{$1=$1};1')
   let HARVESTERERRORS=$HARVERRORSTODAY+$HARVERRORSYESTERDAY
#   cd $FORKTOOLSBLOCKCHAINDIRS/$FORKNAME-blockchain 
#   . ./activate    
   FORKMEM=$(for pid in $(pgrep ^${fork}_); do 
     awk '/Pss:/{ sum += $2 } END { print sum }' /proc/${pid}/smaps 
   done | awk '{ sum +=$1/1024 } END {printf "%7.0f MB\n", sum}')
   FORKVERSION=$($FORKTOOLSDIR/forkver $fork)
   FORKNODES=$($FORKTOOLSDIR/forknodes $fork | wc -l | awk '{$1=$1};1')
   FULLNODEPROCESS='\s'$FORKNAME'_full'   
   FNWORKERS=$(ps -ef | grep "$FULLNODEPROCESS" | grep -v grep | wc -l | awk '{$1=$1};1' )
   
   . $FORKTOOLSDIR/ftrpcinclude.sh   
   EFFORT=${EFFORT%.*}
   ADDRESSBALANCE=${ADDRESSBALANCE%.*}
   printf '%-17.17s %-15.15s %.10s   %5.5s%9.9s %10.10s   %4.4s %8s %7.7s %10d %-5.5s %-7s%7.7s ago %5d%%\n' "$fork" "$FORKVERSION" "$FARMSTATUS" "$FORKNODES" "$PLOTCOUNT" "$NETSPACE" "$FNWORKERS" "$FORKMEM" "$HARVESTERERRORS" "$ADDRESSBALANCE" "$COINNAME" "$ETWTEXT" "$LASTBLOCKAGOTEXT" "$EFFORT"
done


printf '\n'
echo -e "-------------------------------------------- HARVESTERS: $HARVESTERCOUNT ------------------------------------------------"
printf '                                                             Longest      Longest     Proofs\n'
printf '                                                  Last      Response     Response      Since\n'
printf 'Fork               Version      # Plots        Harvest         Today    Yesterday  Yesterday\n'
echo -e "------------------------------------------------------------------------------------------------------------"
for fork in $(ps -ef | grep _harvester | grep -v grep | awk '{print $8}' | sed 's/_harvester//' | grep -v [s]ed | sort); do
   cd $FORKTOOLSHIDDENDIRS/.$fork/mainnet/log
   FORKVERSION=$($FORKTOOLSDIR/forkver $fork)
   LASTHARVESTERLINE=$(cat debug.log | grep "plots were eligible" | tail -1)
   PLOTCOUNT=$(sed 's/.*Total //' <<< "$LASTHARVESTERLINE" | sed 's/ plots//' | awk '{$1=$1};1')
   CURRENTTIME=$(date "+%s")
   LASTHARVESTTIME=$(sed 's/\..*//' <<< "$LASTHARVESTERLINE" | awk '{$1=$1};1')
   LASTHARVESTEPOCH=$(date --date="$LASTHARVESTTIME" +%s | awk '{$1=$1};1')
   if [[ $LASTHARVESTEPOCH = '' ]]; then
     LASTHARVESTEPOCH=0
   fi
   let LASTHARVESTAGO=$CURRENTTIME-$LASTHARVESTEPOCH
   LASTRESPONSETIME=$(sed 's/.*Time: //' <<< "$LASTHARVESTERLINE" | sed 's/ s\. Total.*//' | awk '{$1=$1};1')
   TODAYMAX=$(grep $TODAYSTAMP debug.log* | grep 'plots were eligible' | sed 's/\./\. /' | sed 's/\. .*Time://' | sed 's/ s\. Total.*//' | awk '{print $2}' | sort -nr | head -n 1)
   YESTERDAYMAX=$(grep $YESTERDAYSTAMP debug.log* | grep 'plots were eligible' | sed 's/\./\. /' | sed 's/\. .*Time://' | sed 's/ s\. Total.*//' | awk '{print $2}' | sort -nr | head -n 1)
   PROOFSTODAYLIST=$(grep $TODAYSTAMP debug.log* | grep "Found [1.9].* proofs" | sed 's/.*Found //' | sed 's/ proofs.*//' )
   PROOFSYESTERDAYLIST=$(grep $YESTERDAYSTAMP debug.log* | grep "Found [1.9].* proofs" | sed 's/.*Found //' | sed 's/ proofs.*//' )   
   PROOFCOUNT=0
   for proof in $(echo $PROOFSTODAYLIST); do
     let PROOFCOUNT=$PROOFCOUNT+$proof
   done
   for proof in $(echo $PROOFSYESTERDAYLIST); do
     let PROOFCOUNT=$PROOFCOUNT+$proof
   done
   printf '%-18s %-15s %-8s %5ss ago      %7.2fs     %7.2fs      %5s\n' "$fork" "$FORKVERSION" "$PLOTCOUNT" "$LASTHARVESTAGO" "$TODAYMAX" "$YESTERDAYMAX" "$PROOFCOUNT"
done

exec 2>&3  #Restore stderr destination

