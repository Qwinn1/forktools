#! /usr/bin/env bash

function print_usage () {
   echo "forkcheck help:"
   echo
   echo "SYNOPSIS:   Displays important port settings per the config.yaml of all forks with a -blockchain"
   echo "    directory, then also checks the initial-config.yaml that generates the config during a fresh"
   echo "    installation.  If they are the same, that fork will display only one line and the last column"
   echo "    will display 'matched'.  If they are not the same, that fork will display two lines, one for the"
   echo "    operating config.yaml in the hidden directory and the other the settings from initial-config.yaml."
   echo "    Review those carefully, as at least one of the ports does not match."
   echo "            If you have a mismatch, and the discrepancy was not intended, running forkupdate for the"
   echo "    fork is a quick solution, as it always generates a new config from the initial-config.yaml."
   echo
   echo "PARAMETERS:"
   echo "     -help | --help      Show this information again."
   echo
   exit 0
}

. ftinit.sh

cd $FORKTOOLSBLOCKCHAINDIRS
FORKLIST=$( ls -d1 *-blockchain | sed 's/-blockchain//' )

printf "FORK            VERSION         HARVESTER  HARVESTER  FARMER     FARMER     WALLET     WALLET     TIMELORD   TIMELORD   FULLNODE   FULLNODE   DAEMON     UI         Match\n"
printf "                                           RPC                   RPC                   RPC        LAUNCHER                         RPC                              Init?\n"


for FORKNAME in $FORKLIST; do
   CURRENTCONFIG=$FORKTOOLSHIDDENDIRS/.$FORKNAME/mainnet/config/config.yaml
   if [[ ! -f $CURRENTCONFIG ]]; then
      continue
   fi  

   cd $FORKTOOLSBLOCKCHAINDIRS/$FORKNAME-blockchain
   . ./activate


   # Get all ports.  Uses c1grep function instead of grep so as to not trigger ERROR trap code 1 (no line found) which is intended
   OLDIFS=$IFS
   IFS=''
   MEMORYCONFIG=$(cat $CURRENTCONFIG | c1grep -e '^harvester:' -e '^farmer:' -e '^full_node:' -e '^timelord:' -e '^timelord_launcher:' -e '^ui:' -e '^introducer:' -e '^wallet:' -e '^logging:' -e 'port: ' -e '_peer:' -e 'vdf_server:' ) 

   while read line; do
     WORKLINE=$(sed 's/#.*//' <<< "$line" )  # This removes any comments from consideration for alteration
     if [[ $WORKLINE == *default_full_node_port* || $WORKLINE == *log_syslog_port* ]]; then
        continue
     fi
   TESTSECTION=$(c1grep -e '^harvester:' -e '^farmer:' -e '^full_node:' -e '^timelord:' -e '^timelord_launcher:' -e '^ui:' -e '^introducer:' -e '^wallet:' -e '^logging:' <<< "$WORKLINE" )
     if [[ $TESTSECTION != '' && $TESTSECTION != $SECTION ]]; then 
       SECTION=$TESTSECTION 
     fi
     if [[ $LASTLINE == *_peer:* || $LASTLINE == *vdf_server:* ]]; then
        LASTLINE=$WORKLINE
        continue
     fi
     LASTLINE=$WORKLINE  
     if [[ $SECTION == *full_node:* && $WORKLINE == *rpc_port:* ]]; then 
       FULLNODERPCPORT=$(sed 's/rpc_port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
     if [[ $SECTION == *full_node:* && $WORKLINE == *port:* ]]; then 
       FULLNODEPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
     if [[ $SECTION == *farmer:* && $WORKLINE == *rpc_port:* ]]; then 
       FARMERRPCPORT=$(sed 's/rpc_port: //' <<< "$WORKLINE" | awk '{$1=$1};1')
       continue 
     fi
     if [[ $SECTION == *farmer:* && $WORKLINE == *port:* ]]; then 
       FARMERPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1')
       continue 
     fi
     if [[ $SECTION == *harvester:* && $WORKLINE == *rpc_port:* ]]; then 
       HARVESTRPCPORT=$(sed 's/rpc_port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi  
     if [[ $SECTION == *harvester:* && $WORKLINE == *port:* ]]; then 
       HARVESTPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
     if [[ $SECTION == *wallet:* && $WORKLINE == *rpc_port:* ]]; then 
       WALLETRPCPORT=$(sed 's/rpc_port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi  
     if [[ $SECTION == *wallet:* && $WORKLINE == *port:* ]]; then 
       WALLETPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
     if [[ $SECTION == *ui:* && $WORKLINE == *rpc_port:* ]]; then 
       UIRPCPORT=$(sed 's/rpc_port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi  
     if [[ $SECTION == *ui:* && $WORKLINE == *port:* && $WORKLINE != *daemon_port:* ]]; then 
       UIPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
     if [[ $SECTION == *timelord_launcher:* && $WORKLINE == *port:* ]]; then 
       TIMELORDLAUNCHERPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
     if [[ $SECTION == *timelord:* && $WORKLINE == *port:* ]]; then 
       TIMELORDPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi  
     if [[ $WORKLINE == *daemon_port:* ]]; then 
       DAEMONPORT=$(sed 's/daemon_port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
   done < <(printf '%s\n' "$MEMORYCONFIG")
   
   INITIALCONFIG=$FORKTOOLSBLOCKCHAINDIRS/$FORKNAME-blockchain/$FORKNAME/util/initial-config.yaml
#   echo $INITIALCONFIG
   if [[ ! -f $INITIALCONFIG ]]; then
      echo "$INITIALCONFIG not found, skipping."
      continue
   fi  
   MEMORYCONFIG=$(cat $INITIALCONFIG | c1grep -e '^harvester:' -e '^farmer:' -e '^full_node:' -e '^timelord:' -e '^timelord_launcher:' -e '^ui:' -e '^introducer:' -e '^wallet:' -e '^logging:' -e 'port: ' -e '_peer:' -e 'vdf_server:' ) 

   while read line; do
     WORKLINE=$(sed 's/#.*//' <<< "$line" )  # This removes any comments from consideration for alteration
     if [[ $WORKLINE == *default_full_node_port* || $WORKLINE == *log_syslog_port* ]]; then
        continue
     fi
     TESTSECTION=$(c1grep -e '^harvester:' -e '^farmer:' -e '^full_node:' -e '^timelord:' -e '^timelord_launcher:' -e '^ui:' -e '^introducer:' -e '^wallet:' -e '^logging:' <<< "$WORKLINE" )
     if [[ $TESTSECTION != '' && $TESTSECTION != $SECTION ]]; then 
       SECTION=$TESTSECTION 
     fi
     if [[ $LASTLINE == *_peer:* || $LASTLINE == *vdf_server:* ]]; then
        LASTLINE=$WORKLINE
        continue
     fi
     LASTLINE=$WORKLINE  
     if [[ $SECTION == *full_node:* && $WORKLINE == *rpc_port:* ]]; then 
       IFULLNODERPCPORT=$(sed 's/rpc_port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
     if [[ $SECTION == *full_node:* && $WORKLINE == *port:* ]]; then 
       IFULLNODEPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
     if [[ $SECTION == *farmer:* && $WORKLINE == *rpc_port:* ]]; then 
       IFARMERRPCPORT=$(sed 's/rpc_port: //' <<< "$WORKLINE" | awk '{$1=$1};1')
       continue 
     fi
     if [[ $SECTION == *farmer:* && $WORKLINE == *port:* ]]; then 
       IFARMERPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1')
       continue 
     fi
     if [[ $SECTION == *harvester:* && $WORKLINE == *rpc_port:* ]]; then 
       IHARVESTRPCPORT=$(sed 's/rpc_port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi  
     if [[ $SECTION == *harvester:* && $WORKLINE == *port:* ]]; then 
       IHARVESTPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
     if [[ $SECTION == *wallet:* && $WORKLINE == *rpc_port:* ]]; then 
       IWALLETRPCPORT=$(sed 's/rpc_port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi  
     if [[ $SECTION == *wallet:* && $WORKLINE == *port:* ]]; then 
       IWALLETPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
     if [[ $SECTION == *ui:* && $WORKLINE == *rpc_port:* ]]; then 
       IUIRPCPORT=$(sed 's/rpc_port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi  
     if [[ $SECTION == *ui:* && $WORKLINE == *port:* && $WORKLINE != *daemon_port:* ]]; then 
       IUIPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
     if [[ $SECTION == *timelord_launcher:* && $WORKLINE == *port:* ]]; then 
       ITIMELORDLAUNCHERPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
     if [[ $SECTION == *timelord:* && $WORKLINE == *port:* ]]; then 
       ITIMELORDPORT=$(sed 's/port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi  
     if [[ $WORKLINE == *daemon_port:* ]]; then 
       IDAEMONPORT=$(sed 's/daemon_port: //' <<< "$WORKLINE" | awk '{$1=$1};1') 
       continue
     fi
   done < <(printf '%s\n' "$MEMORYCONFIG")
   IFS=$OLDIFS


   FORKVER=$( $FORKTOOLSDIR/fork $FORKNAME ver )
   
   if [[ $HARVESTPORT != $IHARVESTPORT || $HARVESTRPCPORT != $IHARVESTRPCPORT || $FARMERPORT != $IFARMERPORT || $FARMERRPCPORT != $IFARMERRPCPORT ||  $WALLETPORT != $IWALLETPORT || $WALLETRPCPORT != $IWALLETRPCPORT || $TIMELORDLAUNCHERPORT != $ITIMELORDLAUNCHERPORT || $TIMELORDPORT != $ITIMELORDPORT || $FULLNODEPORT != $IFULLNODEPORT || $FULLNODERPCPORT != $IFULLNODERPCPORT || $DAEMONPORT != $IDAEMONPORT || $UIPORT != $IUIPORT ]]; then
      printf "%-15s %-15s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s config.yaml\n" $FORKNAME $FORKVER $HARVESTPORT $HARVESTRPCPORT $FARMERPORT $FARMERRPCPORT $WALLETPORT $WALLETRPCPORT $TIMELORDLAUNCHERPORT $TIMELORDPORT $FULLNODEPORT $FULLNODERPCPORT $DAEMONPORT $UIPORT
      printf "%-15s %-15s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s initial-config.yaml\n" $FORKNAME $FORKVER $IHARVESTPORT $IHARVESTRPCPORT $IFARMERPORT $IFARMERRPCPORT $IWALLETPORT $IWALLETRPCPORT $ITIMELORDLAUNCHERPORT $ITIMELORDPORT $IFULLNODEPORT $IFULLNODERPCPORT $IDAEMONPORT $IUIPORT
   else
      printf "%-15s %-15s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s matched\n" $FORKNAME $FORKVER $HARVESTPORT $HARVESTRPCPORT $FARMERPORT $FARMERRPCPORT $WALLETPORT $WALLETRPCPORT $TIMELORDLAUNCHERPORT $TIMELORDPORT $FULLNODEPORT $FULLNODERPCPORT $DAEMONPORT $UIPORT
   fi   
done



