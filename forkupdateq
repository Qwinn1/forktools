#! /usr/bin/env bash

function print_usage () {
   echo "forkupdate help:"
   echo
   echo "SYNOPSIS:  Updates a fork to the most recent tagged release with a single command."
   echo "           Defaults to pulling the latest tagged release from the 'latest' branch if one is"
   echo "    available, and from the 'main' branch if it isn't.  Confirmation of the default version"
   echo "    selection is requested before actually updating. "
   echo "           Removes the existing blockchain directory and recreates it with git clone as a"
   echo "    fresh installation.  forkupdate can accept a -b switch, usage identical to -b in git clone."
   echo "           Note that forkupdate will backup and then remove the existing config.yaml so that"
   echo "    'fork init' during the update process will recreate a fresh config.yaml that includes any"
   echo "    new parameters added by the development team. Target addresses and farmer peer will be"
   echo "    transferred to the new config.yaml, and other settings will be configured via forkfixconfig"
   echo "    (so your settings in ftconfigs/config.forkfixconfig will be applied)."
   echo
   echo "PARAMETERS:"
   echo "    forkname            Required."
   echo "    -b                  OPTIONAL.  Update to a specific branch/tag, same usage as -b in git clone."
   echo "    -help | --help      Show this information again."
   echo
   exit 0
}

VALIDATEFORKNAME='Yes'
. ftinit.sh

FORKNAME=$1

# CD and activate venv
cd $FORKTOOLSBLOCKCHAINDIRS/$FORKNAME-blockchain
. ./activate

if [[ $2 != '' && $2 != '-b' ]]; then
   echo "Incorrect parameters. Second parameter can only be -b, and must be followed by a valid github tag/branch."
   print_usage
   exit
fi

# Get repository using git remote -v
GITREPO=$(git remote -v | grep "fetch" | awk '{print $2}' )
BLOCKDIR=$(echo $GITREPO | sed 's/.*\///g')

OLDVERSION=$(forkverq $FORKNAME)
echo "forkupdate:  Updating from current version # :" $OLDVERSION


# Use 'latest' branch if it exists, otherwise use main
git fetch

if [[ $2 == '-b' ]]; then
   if [[ $3 == '' ]]; then
      echo "Set -b switch but no branch/tag specified.  Aborting forkupdate."
      print_usage
      exit
   elif [[ $3 == 'main' || $3 == 'latest' ]]; then
      GITBRANCH=$(echo $2 $3)
   else
      GITTAGS=$(git tag | grep "^$3$" | wc -l)
      if [[ $GITTAGS == 0 ]]; then
         echo "Specified tag $3 does not exist.  Aborting forkupdate."
         exit
      else
         echo "forkupdate:  Validated tag $3 exists in repository."
         GITBRANCH=$(echo $2 $3)   
      fi   
   fi
else
   echo "forkupdate:  No branch or tag specified.  Defaulting to 'latest' branch if it exists, otherwise 'main'."
   OLDIFS=$IFS
   IFS=''
   GITCURRENTBRANCH=$(git branch -a | grep '*' | sed 's/\* //' )
   IFS=$OLDIFS   
   GITLATESTEXISTS=$(git branch -a | grep "\slatest$" | wc -l)
   if [[ $GITLATESTEXISTS == 1 ]]; then
     if [[ $GITCURRENTBRANCH != 'latest' ]]; then
        echo "forkupdate:  Repository has a 'latest' branch.  Switching to 'latest'."
        git checkout latest
     fi
   else
     if [[ $GITCURRENTBRANCH != 'main' ]]; then   
        echo "forkupdate:  Repository does not have a 'latest' branch.  Switching to 'main' branch."   
        git checkout main
     fi
   fi

   GITCURRENTBRANCH=$(git branch -a | grep '*' | sed 's/\* //' )
   LATESTTAG=$(git describe --tags --abbrev=0)
   echo
   echo "forkupdate:  Latest tagged release in branch '$GITCURRENTBRANCH' is" $LATESTTAG
   read -p "forkupdate:  Update to this version?  Y/y to proceed, any other key to abort. (Y/y)" -n 1 -r
   if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo
      echo "forkupdate:  Aborting update.  If you wish to update to a different version, use the -b parameter."
      exit
   else
      GITBRANCH=$(echo "-b" $LATESTTAG)
   fi
fi

echo   
CURRENTCONFIG=$FORKTOOLSHIDDENDIRS/.$FORKNAME/mainnet/config/config.yaml
CONFIGFOUND=$(ls -lt $CURRENTCONFIG | wc -l )
if [[ $CONFIGFOUND = 0 ]]; then
   echo "Existing config.yaml file not found.  Aborting forkupdate."
   exit
fi

# Get farmer peer from harvester section.  Uses c1grep function instead of grep so as to not trigger ERROR trap code 1 (no line found) which is intended
OLDIFS=$IFS
IFS=''
while read line; do
   WORKLINE=$(sed 's/#.*//' <<< "$line" )  # This removes any comments from consideration for alteration
   TESTSECTION=$(c1grep -e '^harvester:' -e '^pool:' -e '^farmer:' -e '^full_node:' -e '^timelord:' -e '^timelord_launcher:' -e '^ui:' -e '^introducer:' -e '^wallet:' -e '^logging:' <<< "$WORKLINE" )
  if [[ $TESTSECTION != '' && $TESTSECTION != $SECTION ]]; then 
    SECTION=$TESTSECTION 
  fi
  if [[ $SECTION == *harvester:* && $WORKLINE == *host:* ]]; then
    FARMERPEER=$(grep "host: " <<< "$WORKLINE" | sed 's/host: //' | sed 's/"//g' | sed 's/'\''//g' | awk '{$1=$1};1')
  fi  
  if [[ $SECTION == *farmer:* && $WORKLINE == *target_address:* ]]; then
    SETFARMTARGET=$(grep "target_address: " <<< "$WORKLINE" | sed 's/.*target_address: //' | sed 's/"//g' | sed 's/'\''//g' | awk '{$1=$1};1')
  fi
  if [[ $SECTION == *pool:* && $WORKLINE == *target_address:* ]]; then
    SETPOOLTARGET=$(grep "target_address: " <<< "$WORKLINE" | sed 's/.*target_address: //' | sed 's/"//g' | sed 's/'\''//g' | awk '{$1=$1};1')
  fi
done < $CURRENTCONFIG
IFS=$OLDIFS

echo
echo "During forkupdate, a fresh config.yaml will be generated by 'fork init' in order to add any new parameters."
echo "The following values are being read from the current config.yaml for transfer to the new config.yaml at the end of forkupdate."
echo "   Farmer peer: " $FARMERPEER
echo "   Farmer target address: " $SETFARMTARGET
echo "   Pool target address  : " $SETPOOLTARGET
echo

echo "forkupdate:  Stopping services."
forkstop $1

deactivate

DATESUFFIX=$(date +%F)
echo "forkupdate:  Renaming existing config.yaml to config.yaml.preupdate-$DATESUFFIX"
mv $CURRENTCONFIG $CURRENTCONFIG.preupdate-$DATESUFFIX

echo "forkupdate:  Removing existing blockchain directory." 
cd $FORKTOOLSBLOCKCHAINDIRS
rm -rf $BLOCKDIR/.git
rm -r $BLOCKDIR
echo "forkupdate:  Running:  git clone $GITREPO $GITBRANCH" 
git clone $GITREPO $GITBRANCH

cd $FORKTOOLSBLOCKCHAINDIRS/$FORKNAME-blockchain
echo "forkupdate:  Running 'sh install.sh'.  Any request for root password comes from that script, not forkupdate."
sh install.sh
. ./activate
$1 init
$1 init --fix-ssl-permissions
echo "forkupdate:  Running 'forkaddplotdirs $FORKNAME'"
forkaddplotdirsq $FORKNAME
echo "forkupdate:  Running 'forkfixconfig $FORKNAME $FARMERPEER'"
forkfixconfigq $FORKNAME $FARMERPEER

OLDIFS=$IFS
IFS=''
LINENUMBER=0
while read line; do
   ((LINENUMBER=$LINENUMBER+1))
   WORKLINE=$(sed 's/#.*//' <<< "$line" )  # This removes any comments from consideration for alteration
   TESTSECTION=$(c1grep -e '^harvester:' -e '^pool:' -e '^farmer:' -e '^full_node:' -e '^timelord:' -e '^timelord_launcher:' -e '^ui:' -e '^introducer:' -e '^wallet:' -e '^logging:' <<< "$WORKLINE" )
  if [[ $TESTSECTION != '' && $TESTSECTION != $SECTION ]]; then 
    SECTION=$TESTSECTION 
  fi
  if [[ $SECTION == *farmer:* && $WORKLINE == *target_address:* ]]; then
    OLDFARMTARGET=$(grep "target_address: " <<< "$WORKLINE" | sed 's/.*target_address: //' | sed 's/"//g' | sed 's/'\''//g' | awk '{$1=$1};1')
    OLDFARMTARGETLINENO=$LINENUMBER
  fi
  if [[ $SECTION == *pool:* && $WORKLINE == *target_address:* ]]; then
    OLDPOOLTARGET=$(grep "target_address: " <<< "$WORKLINE" | sed 's/.*target_address: //' | sed 's/"//g' | sed 's/'\''//g' | awk '{$1=$1};1')
    OLDPOOLTARGETLINENO=$LINENUMBER
  fi
done < $CURRENTCONFIG
IFS=$OLDIFS

echo "forkupdate:  Setting farmer and pool reward target addresses in new config.yaml to pre-forkupdate values."
sed -i "${OLDFARMTARGETLINENO}s/$OLDFARMTARGET/$SETFARMTARGET/" $CURRENTCONFIG
sed -i "${OLDPOOLTARGETLINENO}s/$OLDPOOLTARGET/$SETPOOLTARGET/" $CURRENTCONFIG

NEWVERSION=$(forkverq $FORKNAME)
deactivate
echo
echo "forkupdate complete:  Updated to $FORKNAME version # :" $NEWVERSION
echo "You should now run forkstart -f, -fnw or -ha to restart whichever service you prefer for this fork."
echo

